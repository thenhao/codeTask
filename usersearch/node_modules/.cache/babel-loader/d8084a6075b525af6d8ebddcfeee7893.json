{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Software Developer Immersive\\\\Project\\\\Task\\\\usersearch\\\\src\\\\component\\\\search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect, useForm } from 'react';\nimport axios from 'axios';\nimport './search.css';\nimport useDebounce from './debounce';\nimport ProfileContainer from './profileContainer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Search() {\n  _s();\n\n  //not in use\n  const [value, setValue] = useState(''); //currently in use\n\n  const [users, setUsers] = useState([]);\n  const [text, setText] = useState('');\n  const [suggestions, setSuggetions] = useState([]); //searchterm\n\n  const [searchResult, setSearchResult] = useState([]); //true/false for debouncing\n  // const [debouncingTimeValue, setDebouncingTimeValue] = useState(0);\n\n  const {\n    handleSubmit\n  } = useForm();\n  useEffect(() => {\n    let matches = [];\n    matches = users.filter(user => {\n      //const regex = new RegExp(`${text}`, \"gi\");\n      const regex = new RegExp(\"\\\\S\", 'gim'); //console.log(user.login);\n\n      return user.login.match(regex);\n    });\n    setSuggetions(matches);\n  }, [users]);\n\n  function onTextChange(e) {\n    if (e.target.value.length < 1) {\n      setText('');\n      setSuggetions([]);\n      setUsers([]);\n    }\n\n    setText(e.target.value);\n  }\n\n  function onSuggest(e) {\n    console.log(e.target.textContent);\n    setText(e.target.textContent);\n    setSuggetions([]);\n    this.handleSubmit(e);\n  }\n\n  function whenBlur() {\n    console.log(\"clicked outside of div\");\n    setTimeout(() => {\n      setSuggetions([]);\n    }, 100);\n  }\n\n  function prepSearchQuery(text) {\n    const textUrl = `https://api.github.com/search/users?q=${text}`;\n    return encodeURI(textUrl);\n  }\n\n  async function searchApi() {\n    if (!text || text === '') return; //check for non white space characters\n\n    const regex = new RegExp(\"\\\\S\", 'm');\n\n    if (!text.match(regex)) {\n      console.log('this whitespace regex fired in typing');\n      setUsers([]);\n      setSuggetions([]);\n      return;\n    }\n\n    const URL = prepSearchQuery(text);\n    console.log(URL);\n    const response = await axios.get(URL).catch(err => {\n      console.log(err);\n    });\n    setUsers(response.data.items);\n  }\n\n  useDebounce(text, 500, searchApi);\n\n  async function toSubmit(e) {\n    console.log('function submit fired');\n    e.preventDefault();\n\n    if (!text || text === '') {\n      setUsers([]);\n      setText('');\n      setSuggetions([]);\n      setSearchResult([]);\n      return;\n    } //const regex = new RegExp(\"\\\\s\", 'g');\n    //check for non white space characters\n\n\n    const regex = new RegExp(\"\\\\S\", 'm');\n\n    if (!text.match(regex)) {\n      console.log('this whitespace regex fired in onsubmit');\n      setUsers([]);\n      setText('');\n      setSuggetions([]);\n      setSearchResult([]);\n      return;\n    } else {\n      console.log('did not fire submit');\n    }\n\n    const response = await fetch('/searchUser', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        searchTerm: text\n      })\n    });\n    const result = await response.json(); //const result = await response;\n    //console.log('search result is',result);\n\n    setSearchResult(result);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(toSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onTextChange,\n        onBlur: whenBlur,\n        value: text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Search\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this), suggestions && suggestions.map((suggestion, i) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"suggestion\",\n          onClick: onSuggest,\n          children: suggestion.login\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 24\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(ProfileContainer, {\n        searchResult: searchResult\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 14\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 12\n  }, this);\n}\n\n_s(Search, \"VVhGJVyZnWmZ8qYpYFpwCziHGpc=\", false, function () {\n  return [useForm, useDebounce];\n});\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Software Developer Immersive/Project/Task/usersearch/src/component/search.js"],"names":["React","useState","useEffect","useForm","axios","useDebounce","ProfileContainer","Search","value","setValue","users","setUsers","text","setText","suggestions","setSuggetions","searchResult","setSearchResult","handleSubmit","matches","filter","user","regex","RegExp","login","match","onTextChange","e","target","length","onSuggest","console","log","textContent","whenBlur","setTimeout","prepSearchQuery","textUrl","encodeURI","searchApi","URL","response","get","catch","err","data","items","toSubmit","preventDefault","fetch","method","headers","body","JSON","stringify","searchTerm","result","json","map","suggestion","i"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { useState, useEffect, useForm} from 'react';\r\nimport axios from 'axios';\r\nimport './search.css'\r\nimport useDebounce from './debounce';\r\nimport ProfileContainer from './profileContainer';\r\n\r\n\r\n\r\n\r\nfunction Search(){\r\n    //not in use\r\n    const [value, setValue] = useState('');\r\n    //currently in use\r\n    const [users, setUsers] = useState([]);\r\n    const [text, setText] = useState('');\r\n    const [suggestions, setSuggetions] = useState([]);\r\n    //searchterm\r\n    const [searchResult, setSearchResult] = useState([]);\r\n    //true/false for debouncing\r\n    // const [debouncingTimeValue, setDebouncingTimeValue] = useState(0);\r\n\r\n    \r\n    const { handleSubmit } = useForm();\r\n\r\n    \r\n    useEffect(()=>{\r\n        let matches= [];\r\n        matches = users.filter(user=>{\r\n            //const regex = new RegExp(`${text}`, \"gi\");\r\n            const regex = new RegExp(\"\\\\S\",'gim');\r\n            //console.log(user.login);\r\n            return user.login.match(regex);\r\n        });\r\n        \r\n        setSuggetions(matches);\r\n\r\n    },[users]);\r\n\r\n    \r\n\r\n    function onTextChange(e){\r\n           \r\n        if(e.target.value.length < 1){\r\n            setText('');\r\n            setSuggetions([]);\r\n            setUsers([]);\r\n        }\r\n        \r\n        setText(e.target.value);\r\n    }\r\n\r\n    function onSuggest(e){\r\n        console.log(e.target.textContent);\r\n        setText(e.target.textContent);\r\n        setSuggetions([]);\r\n        this.handleSubmit(e);\r\n    }\r\n\r\n    function whenBlur(){\r\n        \r\n        console.log(\"clicked outside of div\");\r\n        setTimeout(()=>{\r\n            setSuggetions([]);\r\n        }, 100);\r\n    }\r\n\r\n    function prepSearchQuery(text){\r\n        const textUrl = `https://api.github.com/search/users?q=${text}`;\r\n        return encodeURI(textUrl);\r\n    }\r\n\r\n    async function searchApi(){\r\n        if(!text || text === '')\r\n        return;\r\n        //check for non white space characters\r\n        const regex = new RegExp(\"\\\\S\",'m');\r\n        if(!text.match(regex)){\r\n            console.log('this whitespace regex fired in typing');\r\n            setUsers([]);\r\n            setSuggetions([]);\r\n            return;\r\n        }\r\n        const URL = prepSearchQuery(text);\r\n        console.log(URL);\r\n        const response = await axios.get(URL).catch((err)=>{\r\n            console.log(err);\r\n        });\r\n        setUsers(response.data.items);\r\n    }\r\n\r\n    \r\n    useDebounce(text, 500, searchApi);\r\n   \r\n    async function toSubmit(e){\r\n        console.log('function submit fired');\r\n        e.preventDefault();\r\n\r\n        if(!text || text === ''){\r\n            setUsers([]);\r\n            setText('');\r\n            setSuggetions([]);\r\n            setSearchResult([]);\r\n            return;\r\n        }\r\n        \r\n    \r\n        //const regex = new RegExp(\"\\\\s\", 'g');\r\n        //check for non white space characters\r\n        const regex = new RegExp(\"\\\\S\",'m');\r\n        if(!text.match(regex)){\r\n            console.log('this whitespace regex fired in onsubmit');\r\n            setUsers([]);\r\n            setText('');\r\n            setSuggetions([]);\r\n            setSearchResult([]);\r\n            return;\r\n        }else{\r\n            console.log('did not fire submit');\r\n        }\r\n        \r\n        \r\n        const response = await fetch('/searchUser', {\r\n            method:'POST',\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({searchTerm:text})\r\n        });\r\n\r\n        const result = await response.json();\r\n        //const result = await response;\r\n        //console.log('search result is',result);\r\n        setSearchResult(result);\r\n    }\r\n\r\n    return(<div>\r\n        <form onSubmit={handleSubmit(toSubmit)}>\r\n            <h1>{value}</h1>\r\n            <input type=\"text\"\r\n            onChange={onTextChange}\r\n            onBlur={whenBlur} \r\n            value={text}/>\r\n            <button >Search</button>\r\n            {suggestions && suggestions.map((suggestion,i)=>{\r\n                return <div className='suggestion' key={i} onClick={onSuggest} >{suggestion.login}</div>\r\n            })}\r\n             <ProfileContainer searchResult={searchResult}/>\r\n        </form>\r\n    </div>)\r\n}\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}